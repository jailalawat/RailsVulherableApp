To Start the application please follow the following instruction

1) Install the ruby version ruby-2.2.0
2) Install the bundler  'gem install bundler'
3) bundle install
4) Set the database configuration files config/database.yml
5) Run
	rake db:drop && rake db:create && rake db:migrate && rake db:seed
6) Start the Rails server with rails s.


This is very simple rails article post application, where anyone can post a article without the registration(for demo purpose).

Here I am using the 2 model
1) User
2) Article


Article is a public model where anyone can post a article and search it with its content text.



There is 3 type of vulherability we remove 
a) Visit http://localhost:3000/articles/1

<%= sanitize @article.text %>

Solution: Instead of using the raw, html_safe, == we can use the 'sanitize'. We use Rails sanitize method to apply filters that Rails considers safe.

b) Visit http://localhost:3000/articles/1

When you visit the show page of article and click on the web url link, you will see a alert message. This is happen because we add Article 

 web_url: "javascript:alert(document.domain)"

 <strong>Web Url:</strong>
 <%=link_to "Click to visit", @article.web_url%>

Here we add a untrusted input is linked this way as that utility could be used to do XSS attacks. The JavaScript code embedded will work when the victim clicks the link.

Solution:  To remove above bug, I am adding the validation on model to avoid xss

c) Visit http://localhost:3000
When you search a article by context text, Its working well. Look the following code which we are using to search the context

@articles = @articles.where("text like '%#{params[:search].to_s}%'")

Unfortunately, as one can guess from the section title this will introduce an SQL injection vulnerability into your application. The exploitation of the SQL Injection is trivially done, accessing the following URL will enable anyone to download the full user database. 

Try to search with following query

%') UNION ALL select users.id, users.email as title, users.password as text, users.full_name as web_url, users.created_at, users.updated_at from users, articles where (email like '%


It will show the user all user list.

Solution: 
				@articles = @articles.where("text ILIKE ?", "%#{params[:search]}%")

				To avoid XSS I am using ILIKE for the text - postgres case insensitive version of LIKE